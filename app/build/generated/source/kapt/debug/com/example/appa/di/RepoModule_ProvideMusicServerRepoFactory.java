// Generated by Dagger (https://dagger.dev).
package com.example.appa.di;

import com.example.appa.data.local.room.FavoriteDao;
import com.example.appa.data.local.room.MusicServerDao;
import com.example.appa.data.local.room.RecentDao;
import com.example.appa.data.repository.server.MusicServerRepo;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class RepoModule_ProvideMusicServerRepoFactory implements Factory<MusicServerRepo> {
  private final RepoModule module;

  private final Provider<MusicServerDao> musicServerDaoProvider;

  private final Provider<FavoriteDao> favoriteDaoProvider;

  private final Provider<RecentDao> recentDaoProvider;

  public RepoModule_ProvideMusicServerRepoFactory(RepoModule module,
      Provider<MusicServerDao> musicServerDaoProvider, Provider<FavoriteDao> favoriteDaoProvider,
      Provider<RecentDao> recentDaoProvider) {
    this.module = module;
    this.musicServerDaoProvider = musicServerDaoProvider;
    this.favoriteDaoProvider = favoriteDaoProvider;
    this.recentDaoProvider = recentDaoProvider;
  }

  @Override
  public MusicServerRepo get() {
    return provideMusicServerRepo(module, musicServerDaoProvider.get(), favoriteDaoProvider.get(), recentDaoProvider.get());
  }

  public static RepoModule_ProvideMusicServerRepoFactory create(RepoModule module,
      Provider<MusicServerDao> musicServerDaoProvider, Provider<FavoriteDao> favoriteDaoProvider,
      Provider<RecentDao> recentDaoProvider) {
    return new RepoModule_ProvideMusicServerRepoFactory(module, musicServerDaoProvider, favoriteDaoProvider, recentDaoProvider);
  }

  public static MusicServerRepo provideMusicServerRepo(RepoModule instance,
      MusicServerDao musicServerDao, FavoriteDao favoriteDao, RecentDao recentDao) {
    return Preconditions.checkNotNullFromProvides(instance.provideMusicServerRepo(musicServerDao, favoriteDao, recentDao));
  }
}
