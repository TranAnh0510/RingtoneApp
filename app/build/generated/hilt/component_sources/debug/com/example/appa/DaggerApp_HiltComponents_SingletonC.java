// Generated by Dagger (https://dagger.dev).
package com.example.appa;

import android.app.Activity;
import android.app.Service;
import android.content.SharedPreferences;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.example.appa.data.local.room.AppDatabase;
import com.example.appa.data.local.room.FavoriteDao;
import com.example.appa.data.local.room.LanguageDao;
import com.example.appa.data.local.room.MusicServerDao;
import com.example.appa.data.local.room.MySoundDao;
import com.example.appa.data.local.room.RecentDao;
import com.example.appa.data.local.room.SearchDao;
import com.example.appa.data.local.shared.SharedPreferenceHelper;
import com.example.appa.data.repository.audio.AudioDataSource;
import com.example.appa.data.repository.audio.AudioRepo;
import com.example.appa.data.repository.favorite.FavoriteRepo;
import com.example.appa.data.repository.file.FileRepo;
import com.example.appa.data.repository.language.LanguageRepo;
import com.example.appa.data.repository.mysound.MySoundRepo;
import com.example.appa.data.repository.recent.RecentRepo;
import com.example.appa.data.repository.recording.RecordingRepo;
import com.example.appa.data.repository.search.SearchRepo;
import com.example.appa.data.repository.server.MusicServerRepo;
import com.example.appa.data.repository.video.VideoDataSource;
import com.example.appa.data.repository.video.VideoRepo;
import com.example.appa.di.AppModule;
import com.example.appa.di.AppModule_ProvideFavouriteDaoFactory;
import com.example.appa.di.AppModule_ProvideLanguageDaoFactory;
import com.example.appa.di.AppModule_ProvideMusicServerDaoFactory;
import com.example.appa.di.AppModule_ProvideMySoundDaoFactory;
import com.example.appa.di.AppModule_ProvideRecentDaoFactory;
import com.example.appa.di.AppModule_ProvideRoomDb3Factory;
import com.example.appa.di.AppModule_ProvideSearchDaoFactory;
import com.example.appa.di.AppModule_ProvideSharedPreferenceFactory;
import com.example.appa.di.RepoModule;
import com.example.appa.di.RepoModule_ProvideAudioDataSourceFactory;
import com.example.appa.di.RepoModule_ProvideAudioRepoFactory;
import com.example.appa.di.RepoModule_ProvideFavoriteRepoFactory;
import com.example.appa.di.RepoModule_ProvideFileRepoFactory;
import com.example.appa.di.RepoModule_ProvideLanguageRepoFactory;
import com.example.appa.di.RepoModule_ProvideMusicServerRepoFactory;
import com.example.appa.di.RepoModule_ProvideMySoundRepoFactory;
import com.example.appa.di.RepoModule_ProvideRecentRepoFactory;
import com.example.appa.di.RepoModule_ProvideRecordingRepoFactory;
import com.example.appa.di.RepoModule_ProvideSearchRepoFactory;
import com.example.appa.di.RepoModule_ProvideVideoDataSourceImplFactory;
import com.example.appa.di.RepoModule_ProvideVideoRepositoryImplFactory;
import com.example.appa.ui.activity.main.favorite.FavoriteVM;
import com.example.appa.ui.activity.main.favorite.FavoriteVM_HiltModules_KeyModule_ProvideFactory;
import com.example.appa.ui.activity.main.mysound.MySoundVM;
import com.example.appa.ui.activity.main.mysound.MySoundVM_HiltModules_KeyModule_ProvideFactory;
import com.example.appa.ui.activity.main.mysound.edit.EditMySoundVM;
import com.example.appa.ui.activity.main.mysound.edit.EditMySoundVM_HiltModules_KeyModule_ProvideFactory;
import com.example.appa.ui.activity.main.ringtones.RingtoneVM;
import com.example.appa.ui.activity.main.ringtones.RingtoneVM_HiltModules_KeyModule_ProvideFactory;
import com.example.appa.ui.activity.main.ringtones.category.CategoryVM;
import com.example.appa.ui.activity.main.ringtones.category.CategoryVM_HiltModules_KeyModule_ProvideFactory;
import com.example.appa.ui.activity.main.ringtones.recent.RecentVM;
import com.example.appa.ui.activity.main.ringtones.recent.RecentVM_HiltModules_KeyModule_ProvideFactory;
import com.example.appa.ui.activity.main.ringtones.ringtonemore.audio.AudioVM;
import com.example.appa.ui.activity.main.ringtones.ringtonemore.audio.AudioVM_HiltModules_KeyModule_ProvideFactory;
import com.example.appa.ui.activity.main.ringtones.ringtonemore.record.RecordVM;
import com.example.appa.ui.activity.main.ringtones.ringtonemore.record.RecordVM_HiltModules_KeyModule_ProvideFactory;
import com.example.appa.ui.activity.main.ringtones.ringtonemore.video.VideoVM;
import com.example.appa.ui.activity.main.ringtones.ringtonemore.video.VideoVM_HiltModules_KeyModule_ProvideFactory;
import com.example.appa.ui.activity.main.search.SearchVM;
import com.example.appa.ui.activity.main.search.SearchVM_HiltModules_KeyModule_ProvideFactory;
import com.example.appa.ui.activity.multilang.MultiLangVM;
import com.example.appa.ui.activity.multilang.MultiLangVM_HiltModules_KeyModule_ProvideFactory;
import com.example.appa.ui.base.BaseActivity;
import com.example.appa.ui.base.BaseBottomSheetDialogFragment;
import com.example.appa.ui.base.BaseDialogFragment;
import com.example.appa.ui.base.BaseFragment;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.ViewModelLifecycle;
import dagger.hilt.android.flags.HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_LifecycleModule_ProvideActivityRetainedLifecycleFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import dagger.internal.SetBuilder;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DaggerApp_HiltComponents_SingletonC {
  private DaggerApp_HiltComponents_SingletonC() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private AppModule appModule;

    private ApplicationContextModule applicationContextModule;

    private RepoModule repoModule;

    private Builder() {
    }

    public Builder appModule(AppModule appModule) {
      this.appModule = Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule(
        HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule) {
      Preconditions.checkNotNull(hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule);
      return this;
    }

    public Builder repoModule(RepoModule repoModule) {
      this.repoModule = Preconditions.checkNotNull(repoModule);
      return this;
    }

    public App_HiltComponents.SingletonC build() {
      if (appModule == null) {
        this.appModule = new AppModule();
      }
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      if (repoModule == null) {
        this.repoModule = new RepoModule();
      }
      return new SingletonCImpl(appModule, applicationContextModule, repoModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements App_HiltComponents.ActivityRetainedC.Builder {
    private final SingletonCImpl singletonCImpl;

    private ActivityRetainedCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public App_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonCImpl);
    }
  }

  private static final class ActivityCBuilder implements App_HiltComponents.ActivityC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public App_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonCImpl, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements App_HiltComponents.FragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public App_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements App_HiltComponents.ViewWithFragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public App_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements App_HiltComponents.ViewC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public App_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements App_HiltComponents.ViewModelC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelLifecycle viewModelLifecycle;

    private ViewModelCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public ViewModelCBuilder viewModelLifecycle(ViewModelLifecycle viewModelLifecycle) {
      this.viewModelLifecycle = Preconditions.checkNotNull(viewModelLifecycle);
      return this;
    }

    @Override
    public App_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      Preconditions.checkBuilderRequirement(viewModelLifecycle, ViewModelLifecycle.class);
      return new ViewModelCImpl(singletonCImpl, activityRetainedCImpl, savedStateHandle, viewModelLifecycle);
    }
  }

  private static final class ServiceCBuilder implements App_HiltComponents.ServiceC.Builder {
    private final SingletonCImpl singletonCImpl;

    private Service service;

    private ServiceCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public App_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonCImpl, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends App_HiltComponents.ViewWithFragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends App_HiltComponents.FragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    @Override
    public void injectBaseBottomSheetDialogFragment(
        BaseBottomSheetDialogFragment baseBottomSheetDialogFragment) {
    }

    @Override
    public void injectBaseDialogFragment(BaseDialogFragment baseDialogFragment) {
    }

    @Override
    public void injectBaseFragment(BaseFragment baseFragment) {
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }
  }

  private static final class ViewCImpl extends App_HiltComponents.ViewC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends App_HiltComponents.ActivityC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private ActivityCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    @Override
    public void injectBaseActivity(BaseActivity baseActivity) {
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(getViewModelKeys(), new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl));
    }

    @Override
    public Set<String> getViewModelKeys() {
      return SetBuilder.<String>newSetBuilder(11).add(AudioVM_HiltModules_KeyModule_ProvideFactory.provide()).add(CategoryVM_HiltModules_KeyModule_ProvideFactory.provide()).add(EditMySoundVM_HiltModules_KeyModule_ProvideFactory.provide()).add(FavoriteVM_HiltModules_KeyModule_ProvideFactory.provide()).add(MultiLangVM_HiltModules_KeyModule_ProvideFactory.provide()).add(MySoundVM_HiltModules_KeyModule_ProvideFactory.provide()).add(RecentVM_HiltModules_KeyModule_ProvideFactory.provide()).add(RecordVM_HiltModules_KeyModule_ProvideFactory.provide()).add(RingtoneVM_HiltModules_KeyModule_ProvideFactory.provide()).add(SearchVM_HiltModules_KeyModule_ProvideFactory.provide()).add(VideoVM_HiltModules_KeyModule_ProvideFactory.provide()).build();
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }
  }

  private static final class ViewModelCImpl extends App_HiltComponents.ViewModelC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private Provider<AudioVM> audioVMProvider;

    private Provider<CategoryVM> categoryVMProvider;

    private Provider<EditMySoundVM> editMySoundVMProvider;

    private Provider<FavoriteVM> favoriteVMProvider;

    private Provider<MultiLangVM> multiLangVMProvider;

    private Provider<MySoundVM> mySoundVMProvider;

    private Provider<RecentVM> recentVMProvider;

    private Provider<RecordVM> recordVMProvider;

    private Provider<RingtoneVM> ringtoneVMProvider;

    private Provider<SearchVM> searchVMProvider;

    private Provider<VideoVM> videoVMProvider;

    private ViewModelCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam,
        ViewModelLifecycle viewModelLifecycleParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;

      initialize(savedStateHandleParam, viewModelLifecycleParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandle savedStateHandleParam,
        final ViewModelLifecycle viewModelLifecycleParam) {
      this.audioVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 0);
      this.categoryVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 1);
      this.editMySoundVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 2);
      this.favoriteVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 3);
      this.multiLangVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 4);
      this.mySoundVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 5);
      this.recentVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 6);
      this.recordVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 7);
      this.ringtoneVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 8);
      this.searchVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 9);
      this.videoVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 10);
    }

    @Override
    public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
      return MapBuilder.<String, Provider<ViewModel>>newMapBuilder(11).put("com.example.appa.ui.activity.main.ringtones.ringtonemore.audio.AudioVM", ((Provider) audioVMProvider)).put("com.example.appa.ui.activity.main.ringtones.category.CategoryVM", ((Provider) categoryVMProvider)).put("com.example.appa.ui.activity.main.mysound.edit.EditMySoundVM", ((Provider) editMySoundVMProvider)).put("com.example.appa.ui.activity.main.favorite.FavoriteVM", ((Provider) favoriteVMProvider)).put("com.example.appa.ui.activity.multilang.MultiLangVM", ((Provider) multiLangVMProvider)).put("com.example.appa.ui.activity.main.mysound.MySoundVM", ((Provider) mySoundVMProvider)).put("com.example.appa.ui.activity.main.ringtones.recent.RecentVM", ((Provider) recentVMProvider)).put("com.example.appa.ui.activity.main.ringtones.ringtonemore.record.RecordVM", ((Provider) recordVMProvider)).put("com.example.appa.ui.activity.main.ringtones.RingtoneVM", ((Provider) ringtoneVMProvider)).put("com.example.appa.ui.activity.main.search.SearchVM", ((Provider) searchVMProvider)).put("com.example.appa.ui.activity.main.ringtones.ringtonemore.video.VideoVM", ((Provider) videoVMProvider)).build();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          ViewModelCImpl viewModelCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.viewModelCImpl = viewModelCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.example.appa.ui.activity.main.ringtones.ringtonemore.audio.AudioVM 
          return (T) new AudioVM(singletonCImpl.provideAudioRepoProvider.get());

          case 1: // com.example.appa.ui.activity.main.ringtones.category.CategoryVM 
          return (T) new CategoryVM(singletonCImpl.provideMusicServerRepoProvider.get(), singletonCImpl.provideRecentRepoProvider.get(), singletonCImpl.provideFavoriteRepoProvider.get());

          case 2: // com.example.appa.ui.activity.main.mysound.edit.EditMySoundVM 
          return (T) new EditMySoundVM(singletonCImpl.provideFileRepoProvider.get(), singletonCImpl.provideMySoundRepoProvider.get());

          case 3: // com.example.appa.ui.activity.main.favorite.FavoriteVM 
          return (T) new FavoriteVM(singletonCImpl.provideMusicServerRepoProvider.get(), singletonCImpl.provideFavoriteRepoProvider.get(), singletonCImpl.provideRecentRepoProvider.get());

          case 4: // com.example.appa.ui.activity.multilang.MultiLangVM 
          return (T) new MultiLangVM(singletonCImpl.provideLanguageRepoProvider.get());

          case 5: // com.example.appa.ui.activity.main.mysound.MySoundVM 
          return (T) new MySoundVM(singletonCImpl.provideMySoundRepoProvider.get());

          case 6: // com.example.appa.ui.activity.main.ringtones.recent.RecentVM 
          return (T) new RecentVM(singletonCImpl.provideMusicServerRepoProvider.get(), singletonCImpl.provideRecentRepoProvider.get(), singletonCImpl.provideFavoriteRepoProvider.get());

          case 7: // com.example.appa.ui.activity.main.ringtones.ringtonemore.record.RecordVM 
          return (T) new RecordVM(singletonCImpl.provideRecordingRepoProvider.get());

          case 8: // com.example.appa.ui.activity.main.ringtones.RingtoneVM 
          return (T) new RingtoneVM(singletonCImpl.provideRecentRepoProvider.get(), singletonCImpl.provideMusicServerRepoProvider.get(), singletonCImpl.provideFavoriteRepoProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonCImpl.applicationContextModule));

          case 9: // com.example.appa.ui.activity.main.search.SearchVM 
          return (T) new SearchVM(singletonCImpl.provideMusicServerRepoProvider.get(), singletonCImpl.provideSearchRepoProvider.get(), singletonCImpl.provideRecentRepoProvider.get(), singletonCImpl.provideFavoriteRepoProvider.get());

          case 10: // com.example.appa.ui.activity.main.ringtones.ringtonemore.video.VideoVM 
          return (T) new VideoVM(singletonCImpl.provideVideoRepositoryImplProvider.get());

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ActivityRetainedCImpl extends App_HiltComponents.ActivityRetainedC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    private Provider<ActivityRetainedLifecycle> provideActivityRetainedLifecycleProvider;

    private ActivityRetainedCImpl(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.provideActivityRetainedLifecycleProvider = DoubleCheck.provider(new SwitchingProvider<ActivityRetainedLifecycle>(singletonCImpl, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return provideActivityRetainedLifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.ActivityRetainedLifecycle 
          return (T) ActivityRetainedComponentManager_LifecycleModule_ProvideActivityRetainedLifecycleFactory.provideActivityRetainedLifecycle();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends App_HiltComponents.ServiceC {
    private final SingletonCImpl singletonCImpl;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(SingletonCImpl singletonCImpl, Service serviceParam) {
      this.singletonCImpl = singletonCImpl;


    }
  }

  private static final class SingletonCImpl extends App_HiltComponents.SingletonC {
    private final AppModule appModule;

    private final ApplicationContextModule applicationContextModule;

    private final RepoModule repoModule;

    private final SingletonCImpl singletonCImpl = this;

    private Provider<SharedPreferences> provideSharedPreferenceProvider;

    private Provider<AudioDataSource> provideAudioDataSourceProvider;

    private Provider<AudioRepo> provideAudioRepoProvider;

    private Provider<AppDatabase> provideRoomDb3Provider;

    private Provider<MusicServerDao> provideMusicServerDaoProvider;

    private Provider<FavoriteDao> provideFavouriteDaoProvider;

    private Provider<RecentDao> provideRecentDaoProvider;

    private Provider<MusicServerRepo> provideMusicServerRepoProvider;

    private Provider<RecentRepo> provideRecentRepoProvider;

    private Provider<FavoriteRepo> provideFavoriteRepoProvider;

    private Provider<FileRepo> provideFileRepoProvider;

    private Provider<MySoundDao> provideMySoundDaoProvider;

    private Provider<MySoundRepo> provideMySoundRepoProvider;

    private Provider<LanguageDao> provideLanguageDaoProvider;

    private Provider<LanguageRepo> provideLanguageRepoProvider;

    private Provider<RecordingRepo> provideRecordingRepoProvider;

    private Provider<SearchDao> provideSearchDaoProvider;

    private Provider<SearchRepo> provideSearchRepoProvider;

    private Provider<VideoDataSource> provideVideoDataSourceImplProvider;

    private Provider<VideoRepo> provideVideoRepositoryImplProvider;

    private SingletonCImpl(AppModule appModuleParam,
        ApplicationContextModule applicationContextModuleParam, RepoModule repoModuleParam) {
      this.appModule = appModuleParam;
      this.applicationContextModule = applicationContextModuleParam;
      this.repoModule = repoModuleParam;
      initialize(appModuleParam, applicationContextModuleParam, repoModuleParam);

    }

    private SharedPreferenceHelper sharedPreferenceHelper() {
      return new SharedPreferenceHelper(provideSharedPreferenceProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final AppModule appModuleParam,
        final ApplicationContextModule applicationContextModuleParam,
        final RepoModule repoModuleParam) {
      this.provideSharedPreferenceProvider = DoubleCheck.provider(new SwitchingProvider<SharedPreferences>(singletonCImpl, 0));
      this.provideAudioDataSourceProvider = DoubleCheck.provider(new SwitchingProvider<AudioDataSource>(singletonCImpl, 2));
      this.provideAudioRepoProvider = DoubleCheck.provider(new SwitchingProvider<AudioRepo>(singletonCImpl, 1));
      this.provideRoomDb3Provider = DoubleCheck.provider(new SwitchingProvider<AppDatabase>(singletonCImpl, 5));
      this.provideMusicServerDaoProvider = DoubleCheck.provider(new SwitchingProvider<MusicServerDao>(singletonCImpl, 4));
      this.provideFavouriteDaoProvider = DoubleCheck.provider(new SwitchingProvider<FavoriteDao>(singletonCImpl, 6));
      this.provideRecentDaoProvider = DoubleCheck.provider(new SwitchingProvider<RecentDao>(singletonCImpl, 7));
      this.provideMusicServerRepoProvider = DoubleCheck.provider(new SwitchingProvider<MusicServerRepo>(singletonCImpl, 3));
      this.provideRecentRepoProvider = DoubleCheck.provider(new SwitchingProvider<RecentRepo>(singletonCImpl, 8));
      this.provideFavoriteRepoProvider = DoubleCheck.provider(new SwitchingProvider<FavoriteRepo>(singletonCImpl, 9));
      this.provideFileRepoProvider = DoubleCheck.provider(new SwitchingProvider<FileRepo>(singletonCImpl, 10));
      this.provideMySoundDaoProvider = DoubleCheck.provider(new SwitchingProvider<MySoundDao>(singletonCImpl, 12));
      this.provideMySoundRepoProvider = DoubleCheck.provider(new SwitchingProvider<MySoundRepo>(singletonCImpl, 11));
      this.provideLanguageDaoProvider = DoubleCheck.provider(new SwitchingProvider<LanguageDao>(singletonCImpl, 14));
      this.provideLanguageRepoProvider = DoubleCheck.provider(new SwitchingProvider<LanguageRepo>(singletonCImpl, 13));
      this.provideRecordingRepoProvider = DoubleCheck.provider(new SwitchingProvider<RecordingRepo>(singletonCImpl, 15));
      this.provideSearchDaoProvider = DoubleCheck.provider(new SwitchingProvider<SearchDao>(singletonCImpl, 17));
      this.provideSearchRepoProvider = DoubleCheck.provider(new SwitchingProvider<SearchRepo>(singletonCImpl, 16));
      this.provideVideoDataSourceImplProvider = DoubleCheck.provider(new SwitchingProvider<VideoDataSource>(singletonCImpl, 19));
      this.provideVideoRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider<VideoRepo>(singletonCImpl, 18));
    }

    @Override
    public void injectApp(App app) {
      injectApp2(app);
    }

    @Override
    public Set<Boolean> getDisableFragmentGetContextFix() {
      return Collections.<Boolean>emptySet();
    }

    @Override
    public ActivityRetainedComponentBuilder retainedComponentBuilder() {
      return new ActivityRetainedCBuilder(singletonCImpl);
    }

    @Override
    public ServiceComponentBuilder serviceComponentBuilder() {
      return new ServiceCBuilder(singletonCImpl);
    }

    @CanIgnoreReturnValue
    private App injectApp2(App instance) {
      App_MembersInjector.injectSharedPreferenceHelper(instance, sharedPreferenceHelper());
      return instance;
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // android.content.SharedPreferences 
          return (T) AppModule_ProvideSharedPreferenceFactory.provideSharedPreference(singletonCImpl.appModule, ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonCImpl.applicationContextModule));

          case 1: // com.example.appa.data.repository.audio.AudioRepo 
          return (T) RepoModule_ProvideAudioRepoFactory.provideAudioRepo(singletonCImpl.repoModule, singletonCImpl.provideAudioDataSourceProvider.get());

          case 2: // com.example.appa.data.repository.audio.AudioDataSource 
          return (T) RepoModule_ProvideAudioDataSourceFactory.provideAudioDataSource(singletonCImpl.repoModule, ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonCImpl.applicationContextModule));

          case 3: // com.example.appa.data.repository.server.MusicServerRepo 
          return (T) RepoModule_ProvideMusicServerRepoFactory.provideMusicServerRepo(singletonCImpl.repoModule, singletonCImpl.provideMusicServerDaoProvider.get(), singletonCImpl.provideFavouriteDaoProvider.get(), singletonCImpl.provideRecentDaoProvider.get());

          case 4: // com.example.appa.data.local.room.MusicServerDao 
          return (T) AppModule_ProvideMusicServerDaoFactory.provideMusicServerDao(singletonCImpl.appModule, singletonCImpl.provideRoomDb3Provider.get());

          case 5: // com.example.appa.data.local.room.AppDatabase 
          return (T) AppModule_ProvideRoomDb3Factory.provideRoomDb3(singletonCImpl.appModule, ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonCImpl.applicationContextModule));

          case 6: // com.example.appa.data.local.room.FavoriteDao 
          return (T) AppModule_ProvideFavouriteDaoFactory.provideFavouriteDao(singletonCImpl.appModule, singletonCImpl.provideRoomDb3Provider.get());

          case 7: // com.example.appa.data.local.room.RecentDao 
          return (T) AppModule_ProvideRecentDaoFactory.provideRecentDao(singletonCImpl.appModule, singletonCImpl.provideRoomDb3Provider.get());

          case 8: // com.example.appa.data.repository.recent.RecentRepo 
          return (T) RepoModule_ProvideRecentRepoFactory.provideRecentRepo(singletonCImpl.repoModule, singletonCImpl.provideRecentDaoProvider.get());

          case 9: // com.example.appa.data.repository.favorite.FavoriteRepo 
          return (T) RepoModule_ProvideFavoriteRepoFactory.provideFavoriteRepo(singletonCImpl.repoModule, singletonCImpl.provideFavouriteDaoProvider.get());

          case 10: // com.example.appa.data.repository.file.FileRepo 
          return (T) RepoModule_ProvideFileRepoFactory.provideFileRepo(singletonCImpl.repoModule);

          case 11: // com.example.appa.data.repository.mysound.MySoundRepo 
          return (T) RepoModule_ProvideMySoundRepoFactory.provideMySoundRepo(singletonCImpl.repoModule, singletonCImpl.provideMySoundDaoProvider.get());

          case 12: // com.example.appa.data.local.room.MySoundDao 
          return (T) AppModule_ProvideMySoundDaoFactory.provideMySoundDao(singletonCImpl.appModule, singletonCImpl.provideRoomDb3Provider.get());

          case 13: // com.example.appa.data.repository.language.LanguageRepo 
          return (T) RepoModule_ProvideLanguageRepoFactory.provideLanguageRepo(singletonCImpl.repoModule, singletonCImpl.provideLanguageDaoProvider.get());

          case 14: // com.example.appa.data.local.room.LanguageDao 
          return (T) AppModule_ProvideLanguageDaoFactory.provideLanguageDao(singletonCImpl.appModule, singletonCImpl.provideRoomDb3Provider.get());

          case 15: // com.example.appa.data.repository.recording.RecordingRepo 
          return (T) RepoModule_ProvideRecordingRepoFactory.provideRecordingRepo(singletonCImpl.repoModule);

          case 16: // com.example.appa.data.repository.search.SearchRepo 
          return (T) RepoModule_ProvideSearchRepoFactory.provideSearchRepo(singletonCImpl.repoModule, singletonCImpl.provideSearchDaoProvider.get());

          case 17: // com.example.appa.data.local.room.SearchDao 
          return (T) AppModule_ProvideSearchDaoFactory.provideSearchDao(singletonCImpl.appModule, singletonCImpl.provideRoomDb3Provider.get());

          case 18: // com.example.appa.data.repository.video.VideoRepo 
          return (T) RepoModule_ProvideVideoRepositoryImplFactory.provideVideoRepositoryImpl(singletonCImpl.repoModule, singletonCImpl.provideVideoDataSourceImplProvider.get());

          case 19: // com.example.appa.data.repository.video.VideoDataSource 
          return (T) RepoModule_ProvideVideoDataSourceImplFactory.provideVideoDataSourceImpl(singletonCImpl.repoModule, ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonCImpl.applicationContextModule));

          default: throw new AssertionError(id);
        }
      }
    }
  }
}
